/* @(#)sb_extend.ext 1.1 94/10/31 SMI */

/*
 *	Copyright (c) 1989, Sun Microsystems, Inc.  All Rights Reserved.
 *	Sun considers its source code as an unpublished, proprietary
 *	trade secret, and it is available only under strict license
 *	provisions.  This copyright notice is placed here only to protect
 *	Sun in the event the source is deemed a published work.  Dissassembly,
 *	decompilation, or other means of reducing the object code to human
 *	readable form is prohibited by the license agreement under which
 *	this code is provided to the user or company in possession of this
 *	copy.
 *	RESTRICTED RIGHTS LEGEND: Use, duplication, or disclosure by the
 *	Government is subject to restrictions as set forth in subparagraph
 *	(c)(1)(ii) of the Rights in Technical Data and Computer Software
 *	clause at DFARS 52.227-7013 and in similar clauses in the FAR and
 *	NASA FAR Supplement.
 */


#ifndef sb_extend_ext_INCLUDED
#define sb_extend_ext_INCLUDED

language extend "/*" "*/" grep-able
version 1

/*
 * These ref-focus-unit statements defines the tags that the focus
 * facility uses. sb_focus.ext describe them in detail.
 */
#define REF_FOCUS_UNITS \
ref-focus-unit File \
ref-focus-unit Macro \
ref-focus-unit Language

#include "sb_language_master.ext"

properties extend {
	def
	end
	extend
	focus_unit
	language_
	menu_equiv
	menu_path
	node_
	node_equiv
	prefix
	prop
	proper
	ref
	rendering_
	start_
	tag
}

tags extend 32 {
	language_ =
		( ALL_HITS extend language_ )
		CPP_SECONDARY_SYMBOL

	node_tag =
		( ALL_HITS extend ref tag proper node_ )
		CPP_SECONDARY_SYMBOL
	node_equiv =
		( ALL_HITS extend node_equiv )
		CPP_SECONDARY_SYMBOL

	rendering_tag =
		( ALL_HITS extend rendering_ ref tag proper )
		CPP_SECONDARY_SYMBOL

	def_tag_prefix =
		( ALL_HITS extend def tag prefix )
		CPP_SECONDARY_SYMBOL
	def_tag =
		( ALL_HITS extend def tag proper )
		CPP_SECONDARY_SYMBOL
	ref_tag =
		( ALL_HITS extend ref tag proper )
		CPP_SECONDARY_SYMBOL

	def_prop_prefix =
		( ALL_HITS extend def prop prefix )
		CPP_SECONDARY_SYMBOL
	ref_prop_prefix =
		( ALL_HITS extend ref prop prefix )
		CPP_SECONDARY_SYMBOL
	def_prop =
		( ALL_HITS extend def prop proper )
		CPP_SECONDARY_SYMBOL
	ref_prop =
		( ALL_HITS extend ref prop proper )
		CPP_SECONDARY_SYMBOL

	def_focus_unit_name =
		( ALL_HITS extend def focus_unit )
		CPP_SECONDARY_SYMBOL
	def_focus_unit_code =
		( ALL_HITS extend def focus_unit )
		CPP_SECONDARY_SYMBOL
	ref_focus_unit =
		( ALL_HITS extend ref focus_unit )
		CPP_SECONDARY_SYMBOL

	menu_path =
		( ALL_HITS extend ref menu_path BASE.string )
		CPP_SECONDARY_STRING

	string =
		( ALL_HITS extend BASE.string )
		CPP_SECONDARY_STRING

	equiv_language =
		( ALL_HITS extend menu_equiv )
		CPP_SECONDARY_SYMBOL
}

menu {
	CB_MENU_STRING_ALL_MATCHES equiv = ( ALL_HITS )
		"Extend" menu {
			"All extend symbols"
				= ( ALL_HITS extend )
			"Languages"
				= ( ALL_HITS extend language_ )
			"Tags" menu {
				"All Tags"
					= ( ALL_HITS extend tag proper )
				"Tag Definitions"
					= ( ALL_HITS extend tag proper def )
				"Tag References"
					= ( ALL_HITS extend tag proper ref )
			}
			"Tag Prefix"
				= ( ALL_HITS extend tag prefix )
			"Props" menu {
				"All Props"
					= ( ALL_HITS extend prop proper )
				"Prop Definitions"
					= ( ALL_HITS extend prop proper def )
				"Prop References"
					= ( ALL_HITS extend prop proper ref )
			}
			"Prop Prefix"
				= ( ALL_HITS extend prop prefix )
			"Node Equiv"
				= ( ALL_HITS extend node_equiv )
			"Focus Unit"
				= ( ALL_HITS extend focus_unit )
			"Equiv Language"
				= ( ALL_HITS extend menu_equiv )
		}

	BASE_STANDARD_MENU_ITEMS
}

#endif
