| "@(#)statmul.pp.u 1.1 94/10/31 SMI"

| Copyright 1988 by Sun Microsystems, Inc.

|   Multiplier routine.
|   Multiplier arrives in r[2].  It should have fewer one bits than
|   multiplicand which arrives in acc.  The result is computed and
|   in r[0,1] with the low order bits in r[0].  The algorithm is a
|   simple shift-add.  It was chosen because the majority of
|   multipliers will not have many bits.

#define Mulcand		acc
#define LoRslt		r[0]
#define HiRslt		r[1]
#define Multiplier	r[2]
#define HiBit		r[3]
#define Lotmp 		r[3]
#define Mask		r[3]	/* Re-use HiBit register. */
#define Sign		r[4]
#define Hitmp 		r[5]	/* same as MulHigh */
#define MulHigh		r[5]


stmultiply: ;			GB_Installed->scrmemp; ;			| 
	testw(d);		scrmem->am;	;				| 
	xorw,s Multiplier, Mulcand, y; ;	cjp,~zer stmulchip;		| 
	movw 0, Sign;		;		cjp, ~neg stmul;		| 
   	incw 0, Sign;		;		;				| 
stmul:	movw 0, LoRslt;		;		;				| Clear.
	testw (Multiplier);	=stmul2->brreg;	;				| 
	movw 0, HiRslt;		;		cjp, ~neg stmul1;		| 
	negw Multiplier, Multiplier;;		;				| 
stmul1:	testw (Mulcand);	;		crtn, zer;			| 
	priw Multiplier, 0, HiBit;16->am;	cjp, ~neg;			| Find highest bit and test Multiplier.
	negw Mulcand, Mulcand;	;		;				| 
stmul2:	rsubw d, HiBit, HiBit;	am->brreg;	crtn, zer;			| Generate number of times for loop.
	rolw,s 15, Multiplier, Multiplier;;	push, go;			| Shift Multiplier. Set carry 0.
| Ld cntr.  Push mulloop on stack.

	;			;		cjp, ~neg stmulshift;		| If bit 15 zero skip addition.
	addw,s HiRslt, Mulcand, HiRslt;;	;				| Add Multiplicand to result.
stmulshift:srcw HiRslt, HiRslt;	;		;				| Shift result.
	srqw LoRslt, LoRslt;	;		;				| 
	rolw,s 15, Multiplier, Multiplier;;	rfct;				| Shift Multiplier. Set carry 0.

	incw HiBit, y;		am->nreg;	;				| 
	movw 0, Mask;		;		;				| 
	bsetw n, Mask;		;		;				| 
	decw Mask, Mask;	am->am;		;				| 
	rolw n, HiRslt, HiRslt;;		;				| Rotate right 1 bit.
	movw HiRslt, acc;	;		;				| 
	andw d, HiRslt, HiRslt;	;		;				| Mask is in d.
	movw LoRslt, y;		am->am;		;				| Save LoRslt in d.
	romw n, d, acc, Mask;	;		;				| 
	testw (Sign);		;		;				| 
	movw acc, LoRslt;	;		crtn, zer;			| 
	negw,s LoRslt, LoRslt;	;		;				| 
	compw HiRslt, HiRslt;	;		crtn, ~cry;			| 
	incw HiRslt, HiRslt;	;		crtn, go;			| 


stmuldbl: ;			GB_Installed->scrmemp; ;			| 
	testw(d);		scrmem->am;	;				| 
	xorw,s MulHigh, Mulcand, y; ;		cjp,~zer stmuldchip;		| 
	movw 0, Sign;		;		cjp, ~neg stmuld;		| 
	incw 0, Sign;		;		;				| 
stmuld:	movw 0, LoRslt;		;		;				| Clear
	testw (MulHigh);	;		;				| 
	movw 0, HiRslt;		;		cjp, ~zer stmuldnot0;		| 
	testw (Multiplier);	;		;				| 
	testw (Mulcand);	16->am;		crtn, zer;			| 
	priw Multiplier, 0, HiBit; ;		cjp, neg stmuldneg;		| 
	;			;		cjp, go stmuld2;		| 
stmuldnot0: ;			;		cjp, ~neg stmuld1;		| 
	negw,s Multiplier, Multiplier; ;	;				| Double precision negate.
	compw MulHigh, MulHigh;	;		cjp, ~cry stmuld1;		| 
	incw MulHigh, MulHigh;	;		;				| 
stmuld1:priw,s MulHigh, 0, HiBit; 32->am;	;				| Find highest bit
	testw (Mulcand);	;		cjp, ~zer stmuldznhi;		| 
	priw Multiplier, 0, HiBit; 16->am;	;				| 
stmuldznhi: ;			;		cjp, ~neg stmuld2;		| 
stmuldneg: negw Mulcand, Mulcand; ;		;				| 
stmuld2:rsubw d, HiBit, HiBit;	am->brreg;	crtn, zer;			| Calculate number of loop cycles
	sr0w MulHigh, MulHigh; ;		;				| Shift multiplier, set carry 0.
	srqw Multiplier, Multiplier; ;		;				| 
	rolw 1, MulHigh, MulHigh; ;		;				| Fudge so that next instr. can shift in link bit.
	srqw,s MulHigh, MulHigh; ;		push, go;			| 

	;			;		cjp, ~neg stmuldshift;		| If bit 15 zero skip addition.
	addw,s HiRslt, Mulcand, HiRslt; ;	;				| Add Multiplicand to result.
stmuldshift: srcw HiRslt, HiRslt; ;		;				| Shift result.
	srqw LoRslt, LoRslt;	;		;				| 
	sr0w MulHigh, MulHigh; ;		;				| Shift multiplier, set carry 0.
	srqw Multiplier, Multiplier; ;		;				| 
	rolw 1, MulHigh, MulHigh; ;		;				| 
	srqw,s MulHigh, MulHigh; ;		rfct;				| 

	subw,s d, HiBit, HiBit;	16->am;		;				| 
	;			;		cjp, ~neg stmuldrol;		| 
	addw d, HiBit, HiBit;	;		;				| 
stmuldhi: movw,s HiRslt, LoRslt; ;		;				| HiBit < 16.
	movw 0, HiRslt;		;		cjp, ~neg stmuldrol;		| 
	decw HiRslt, HiRslt;	;		;				| 
stmuldrol: incw HiBit, y;	am->nreg;	;				| 
	movw 0, Mask;		;		;				| 
	bsetw n, Mask;		;		;				| 
	sub2nw,s 0, Mask, Mask;	am->am;		;				| 
	rolw n, HiRslt, HiRslt;	;		cjp, ~zer stmuldlt16;		| Rotate right 1 bit.
	compw 0, Mask;		am->am;		;				| 
stmuldlt16: movw HiRslt, acc;	;		;				| 
	andw d, HiRslt, HiRslt;	;		;				| Mask is in d.
	movw LoRslt, y;		am->am;		;				| Save LoRslt in d.
	romw n, d, acc, Mask;	;		;				| 
	testw (Sign);		;		;				| 
	movw acc, LoRslt;	;		crtn, zer;			| 
	negw,s LoRslt, LoRslt;	;		;				| 
	compw HiRslt, HiRslt;	;		crtn, ~cry;			| 
	incw HiRslt, HiRslt;	;		crtn, go;			| 

stmulchip: movw 0,Sign;		;		cjp,~neg .+2;			| 
	incw 0,Sign;		;		;				| 
	testw(Multiplier);	;		;				|  
	testw(Mulcand);		;		cjp,~neg stmulok;		| 
	negw Multiplier,Multiplier; ;		;				| 
stmulok: ;			;		cjp,~neg stmcandok;		|
	negw Mulcand,Mulcand;	;		;				| 
stmcandok: ;			;		cjs,go stdomul;			| 
	testw(Sign);		;		;				| 
	compw LoRslt,Lotmp;	;		crtn,zer;			| 
	compw HiRslt,HiRslt;	;		;				|  
	addw d,Lotmp,LoRslt;	1->am;		;				| 
	addcw d,HiRslt,HiRslt;	0->am;		crtn,go;			| 
	

stdomul: ;			USMul->mulmode;	;				| 
	movw Multiplier, y;	am->mulx;	;				| 
	movw Mulcand, y;	am->muly;	;				| 
	;			;		;				| wait for transfer of x and y to multiplier
	;			;		;				| wait for multiply
	movw d, LoRslt;		mulres->am;	;				| 
	movw d, HiRslt;		mulres->am;	crtn, go;			| 
	

|   Multiply a 16.16 fixed point number by a 16-bit multiplicand.  
|   	1.  compute (mullow * mulcand) - multiply fraction by an integer, gives 16.16 (mullow = multiplier)
|   	2.  compute (mulhigh * mulcand) - gives 32.0, only use lower 16 bits, add to upper of (1)
|   It is important to note that the result is formatted as follows:	
|   		LoRslt . HiRslt

stmuldchip: movw 0,Sign;	;		cjp,~neg .+2;			| cc set in original muldbl routine above
	incw 0,Sign;		;		;				| 
	testw(MulHigh);		;		;				| 
	testw(Mulcand);		;		cjp,~neg stmdmulok;		| 
	compw MulHigh,MulHigh;	;		;				| negate 32 bit multiplier
	compw Multiplier,Multiplier; ;		;				| 
	addw d,Multiplier,Multiplier; 1->am;	;				| 
	addcw d,MulHigh,MulHigh; 0->am;		;				| 
stmdmulok: ;			;		cjp,~neg stmdmcandok;		| 
	negw Mulcand,Mulcand;	;		;				| 
stmdmcandok: ;			;		cjs,go stdomul;			| lower (fractional) half
	movw MulHigh,Multiplier; ;		;				| move mulhi to multiplier and multiply upper (rational) half
	movw,s HiRslt,Hitmp;	;		;				| save Hi of 1st mult to add to Lo of 2nd (check sign too)
	;			;		cjp,~neg .+2;			| 
	negw Hitmp,Hitmp;	;		;				| 
	movw LoRslt,Lotmp;	;		cjs,go stdomul;			| 
	movw LoRslt,y;		am->am;		;				| 
	addw d,Hitmp,HiRslt;	;		;				| add lower portion high portion of previous
	movw Lotmp,LoRslt;	;		;				| 
	testw(Sign);		;		;				| 
stmdnegres: compw LoRslt,Lotmp;	;		cjp,zer stmdswap;		| 
	compw HiRslt,HiRslt;	;		;				|  
	addw d,Lotmp,LoRslt;	1->am;		;				| 
	addcw d,HiRslt,HiRslt;	0->am;		;				| 
stmdswap: movw HiRslt,Hitmp;	;		;				| swap low and high results
	movw LoRslt,HiRslt;	;		;				| 
	movw Hitmp,LoRslt;	;		crtn,go;			| 


#undef Lotmp
#undef Hitmp
#undef Sign
#undef Mask
#undef HiBit

#ifndef SWIDTH
#define SWIDTH 1152
#endif

#if SWIDTH == 1152
#include "statm1152.pp.u"
#endif

#if SWIDTH == 1024
#include "statm1024.pp.u"
#endif
